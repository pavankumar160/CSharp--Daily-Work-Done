using System;

namespace OperatorExamples
{

    class Complex
    {
        public double Real { get; set; }
        public double Imag { get; set; }

        public Complex(double r, double i)
        {
            Real = r;
            Imag = i;
        }

        // Overloading '+' operator
        public static Complex operator +(Complex a, Complex b)
        {
            return new Complex(a.Real + b.Real, a.Imag + b.Imag);
        }

        // Overloading '==' and '!='
        public static bool operator ==(Complex a, Complex b)
        {
            return (a.Real == b.Real && a.Imag == b.Imag);
        }

        public static bool operator !=(Complex a, Complex b)
        {
            return !(a == b);
        }

        public override string ToString()
        {
            return $"{Real} + {Imag}i";
        }

        // Overriding Equals and GetHashCode for good practice
        public override bool Equals(object obj)
        {
            if (obj is Complex c)
                return this == c;
            return false;
        }

        public override int GetHashCode()
        {
            return Real.GetHashCode() ^ Imag.GetHashCode();
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            // Null-Coalescing Operator
            string? name = null;
            string result = name ?? "Default Name";  
            Console.WriteLine("Null-Coalescing (??): " + result);

            string? city = null;
            city ??= "Unknown City";  // if null, assign default
            Console.WriteLine("Null-Coalescing Assignment (??=): " + city);


            // Type-Casting & Expressions 
            object obj = "Hello C#";

            // 'is' operator
            if (obj is string s) // pattern matching
            {
                Console.WriteLine("'is' operator: obj is string with value = " + s);
            }

            // 'as' operator
            string str = obj as string; // safe cast
            Console.WriteLine("'as' operator: " + (str ?? "Not a string"));

            // 'typeof'
            Type t = typeof(int);
            Console.WriteLine("'typeof' operator: " + t);

            // Explicit Cast
            double d = 9.8;
            int i = (int)d;  // explicit cast, truncates
            Console.WriteLine("Explicit cast double->int: " + i);


            // Operator Overloading 
            Complex c1 = new Complex(2, 3);
            Complex c2 = new Complex(4, 5);

            Complex sum = c1 + c2; // uses overloaded +
            Console.WriteLine("Operator Overloading (+): " + sum);

            Console.WriteLine("c1 == c2 ? " + (c1 == c2));
            Console.WriteLine("c1 != c2 ? " + (c1 != c2));
        }
    }
}
